// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/apm-dev/go-clean-architecture/data/datasources/acl_service"
	"github.com/apm-dev/go-clean-architecture/data/datasources/postgres"
	"github.com/apm-dev/go-clean-architecture/data/repositories"
	"github.com/apm-dev/go-clean-architecture/domain/usecases"
	"github.com/apm-dev/go-clean-architecture/presentation/grpc/servers"
	"github.com/go-pg/pg/v10"
	"github.com/google/wire"
)

// Injectors from wire.go:

func PostgresDB() *pg.DB {
	db := providePostgresDB()
	return db
}

func PostgresDS() postgres.PgDataSource {
	db := providePostgresDB()
	pgDataSource := postgres.NewPgDataSource(db)
	return pgDataSource
}

func GrpcBlogServer() *servers.BlogServer {
	db := providePostgresDB()
	pgDataSource := postgres.NewPgDataSource(db)
	repositoriesBlogRepository := repositories.NewBlogRepository(pgDataSource)
	createBlog := usecases.NewCreateBlog(repositoriesBlogRepository)
	blogServer := servers.NewBlogServer(createBlog)
	return blogServer
}

func CheckAccess() usecases.CheckAccess {
	aclDataSource := acl_service.NewACLDataSource()
	repositoriesACLRepository := repositories.NewACLRepository(aclDataSource)
	checkAccess := usecases.NewCheckAccess(repositoriesACLRepository)
	return checkAccess
}

// wire.go:

var (
	//	Third-Party
	postgresDB = wire.NewSet(providePostgresDB)

	//	DataSources
	postgresDS = wire.NewSet(postgres.NewPgDataSource, postgresDB)
	aclDS      = wire.NewSet(acl_service.NewACLDataSource)

	//	Repositories
	blogRepository = wire.NewSet(repositories.NewBlogRepository, postgresDS)
	aclRepository  = wire.NewSet(repositories.NewACLRepository, aclDS)

	//	UseCases
	createBlogUC  = wire.NewSet(usecases.NewCreateBlog, blogRepository)
	checkAccessUC = wire.NewSet(usecases.NewCheckAccess, aclRepository)

	//	Presentations
	grpcBlogServer = wire.NewSet(servers.NewBlogServer, createBlogUC)
)
